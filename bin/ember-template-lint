#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const glob = require('glob');
const Linter = require('../lib/index');
const linter = new Linter();

function errorsToMessages(errors) {
  return errors.map((error) => {
    let message = `${error.rule}: ${error.message} (${error.moduleId}`;

    if (error.line && error.column) {
      message += ` @ L${error.line}:C${error.column}`;
    }

    message += ')';

    if (error.source) message += `:\n\`${error.source}\``;

    return message;
  }).join('\n');
}

function printErrors(errors) {
  if (process.argv.indexOf('--json') + 1) {
    console.log(JSON.stringify(errors, null, 2));
  } else {
    Object.keys(errors).forEach(filePath => console.log(errorsToMessages(errors[filePath])));
  }
}

function lintFile(filePath, moduleId) {
  const source = fs.readFileSync(filePath, { encoding: 'utf8' });
  return linter.verify({ source, moduleId });
}

function getRelativeFilePaths() {
  const fileArgs = process.argv.slice(2).filter(arg => arg.slice(0, 2) !== '--');

  const relativeFilePaths = fileArgs
    .reduce((filePaths, fileArg) => {
      let globPath;
      let isDirectory;

      try {
        isDirectory = fs.statSync(fileArg).isDirectory();
      } catch(e) {
        isDirectory = false;
      }

      if (isDirectory) globPath = `${fileArg}/**/*.hbs`;
      else globPath = fileArg;

      return filePaths.concat(glob.sync(globPath));
    }, [])
    .filter(filePath => filePath.slice(-4) === '.hbs');

  return Array.from(new Set(relativeFilePaths));
}

function run() {
  let exitCode = 0;

  const errors = getRelativeFilePaths().reduce((errors, relativeFilePath) => {
    const filePath = path.resolve(relativeFilePath);
    const fileErrors = lintFile(filePath, relativeFilePath.slice(0, -4));

    if (fileErrors.some((err) => err.severity > 1)) exitCode = 1;

    if (fileErrors.length) errors[filePath] = fileErrors;
    return errors;
  }, {});

  if (Object.keys(errors).length) printErrors(errors);
  if (exitCode) return process.exit(exitCode);
}

run();
